display.brewer.pal(n=12,name="Set3")
brewer.pal(n=12,name="Set3")
color<-c("#FB8072","#BEBADA","#80B1D3","#FDB462","#B3DE69")
#if you use the Rcolor brewer,你需要利用scale_color_brewer(palette="paletee_name")
#自選顏色的話用Scale_color_manual(values=color_vector)
#ggplot
p <- ggplot(Y) +
geom_segment(aes(x = X1, y = X2,
xend = Dim1, yend = Dim2,color=location),
# geom_segment 绘制两点间的直线
size = 0.75,linetype="dashed",alpha=0.7) +
geom_point(aes(X1, X2, color =location),shape=16,size = 3,alpha=0.5) +
geom_point(aes(Dim1,Dim2,color = location),shape=17,size = 3,alpha=0.5) +
scale_color_manual("Location",values = color) +theme_bw() +labs( title="Procrustes analysis")+
labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
geom_vline(xintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
geom_hline(yintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
annotate('text', label = sprintf('M^2 == 0.0282 '),
x = 0.2, y = 0.29, size =4, parse = TRUE) +
annotate('text', label = 'P==0.001',
x = 0.2, y = 0.275, size = 4, parse = TRUE)+theme(axis.title = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
p
#if you use the Rcolor brewer,你需要利用scale_color_brewer(palette="paletee_name")
#自選顏色的話用Scale_color_manual(values=color_vector)
#ggplot
p <- ggplot(Y) +
geom_segment(aes(x = X1, y = X2,
xend = Dim1, yend = Dim2,color=location),
# geom_segment 绘制两点间的直线
size = 0.75,linetype="dashed",alpha=0.7) +
geom_point(aes(X1, X2, color =location),shape=16,size = 3,alpha=0.5) +
geom_point(aes(Dim1,Dim2,color = location),shape=17,size = 3,alpha=0.5) +
scale_color_manual("Location",values = color) +theme_bw() +labs( title="Procrustes analysis")+
labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
geom_vline(xintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
geom_hline(yintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
annotate('text', label = sprintf('M^2 == 0.7828 '),
x = 0.2, y = 0.29, size =4, parse = TRUE) +
annotate('text', label = 'P==0.075',
x = 0.2, y = 0.275, size = 4, parse = TRUE)+theme(axis.title = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
p
#if you use the Rcolor brewer,你需要利用scale_color_brewer(palette="paletee_name")
#自選顏色的話用Scale_color_manual(values=color_vector)
#ggplot
p <- ggplot(Y) +
geom_segment(aes(x = X1, y = X2,
xend = Dim1, yend = Dim2,color=location),
# geom_segment 绘制两点间的直线
size = 0.75,linetype="dashed",alpha=0.7) +
geom_point(aes(X1, X2, color =location),shape=16,size = 3,alpha=0.5) +
geom_point(aes(Dim1,Dim2,color = location),shape=17,size = 3,alpha=0.5) +
scale_color_manual("Location",values = color) +theme_bw() +labs( title="Procrustes analysis")+
labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
geom_vline(xintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
geom_hline(yintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
annotate('text', label = sprintf('M^2 == 0.7828 '),
x = 0.2, y = 0.29, size =4, parse = TRUE) +
annotate('text', label = 'p==0.075',
x = 0.2, y = 0.275, size = 4, parse = TRUE)+theme(axis.title = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
p
P
P
#if you use the Rcolor brewer,你需要利用scale_color_brewer(palette="paletee_name")
#自選顏色的話用Scale_color_manual(values=color_vector)
#ggplot
p <- ggplot(Y) +
geom_segment(aes(x = X1, y = X2,
xend = Dim1, yend = Dim2,color=location),
# geom_segment 绘制两点间的直线
size = 0.75,linetype="dashed",alpha=0.7) +
geom_point(aes(X1, X2, color =location),shape=16,size = 3,alpha=0.5) +
geom_point(aes(Dim1,Dim2,color = location),shape=17,size = 3,alpha=0.5) +
scale_color_manual("Location",values = color) +theme_bw() +labs( title="Procrustes analysis")+
labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
geom_vline(xintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
geom_hline(yintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
annotate('text', label = sprintf('M^2 == 0.7828 '),
x = 0.2, y = 0.29, size =4, parse = TRUE) +
annotate('text', label = 'P==0.075',
x = 0.2, y = 0.275, size = 4, parse = TRUE)+theme(axis.title = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
p
library(pheatmap)
library(openxlsx)
library(tidyverse)
library(pheatmap)
data<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames = F)
data_argname<-data
data$Type.level.results<-str_to_title(data$Type.level.results)
data$Type.level.results[data$Type.level.results=="macrolide-lincosamide-streptogramin"]<-"MLS"
rownames(data)<-data$Type.level.results
library(vegan)
library(ecodist)
library(ggplot2)
library(openxlsx)
library(RColorBrewer)
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/rel abundance table/species_rel_table.xlsx",sheet=1,rowNames=F,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
arg_data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
#這個不一定要，下面這個只是把全部都是0的rows清掉
#dbpata[dbpata<0.0001]<-0
#dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
#dbpata1<-as.data.frame(apply(dbpata,2,function(x) x/sum(x)))
rownames(dbpata)<-dbpata$Species
dbpata<-dbpata[,-(1:7)]
dbpata <-as.data.frame(t(dbpata))
arg_data<-as.data.frame(t(arg_data))
dbpata <- decostand(dbpata, method = 'hellinger')
taxa_bray<-vegdist(dbpata, method="bray")
arg_bray<-vegdist(arg_data, method="bray")
#普氏分析可以用pcoa,pca,nmds等都可以，看哪個分離的好
pcoa1 = cmdscale(taxa_bray, eig=TRUE)
pcoa2 = cmdscale(arg_bray, eig=TRUE)
#mds.taxa<-monoMDS(taxa_bray)
#mds.arg<-monoMDS(arg_bray)
pro.g.s<-procrustes(pcoa1,pcoa2,symmetric = T)
summary(pro.g.s)
protest(pcoa1,pcoa2)
plot(pro.g.s, kind = 1,type="text")
Y<-cbind(data.frame(pro.g.s$Yrot),data.frame(pro.g.s$X))
X<-data.frame(pro.g.s$rotation)
Y$sample<-rownames(Y)
Y <- merge(Y, groupata, by = 'sample')
Y$location<-factor(Y$location,levels = c("Raw","Finished","Upstream","Midstream","Downstream"))
#color
RColorBrewer::display.brewer.all()
display.brewer.pal(n=12,name="Set3")
brewer.pal(n=12,name="Set3")
color<-c("#FB8072","#BEBADA","#80B1D3","#FDB462","#B3DE69")
#if you use the Rcolor brewer,你需要利用scale_color_brewer(palette="paletee_name")
#自選顏色的話用Scale_color_manual(values=color_vector)
#ggplot
p <- ggplot(Y) +
geom_segment(aes(x = X1, y = X2,
xend = Dim1, yend = Dim2,color=location),
# geom_segment 绘制两点间的直线
size = 0.75,linetype="dashed",alpha=0.7) +
geom_point(aes(X1, X2, color =location),shape=16,size = 3,alpha=0.5) +
geom_point(aes(Dim1,Dim2,color = location),shape=17,size = 3,alpha=0.5) +
scale_color_manual("Location",values = color) +theme_bw() +labs( title="Procrustes analysis")+
labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
geom_vline(xintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
geom_hline(yintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
annotate('text', label = sprintf('M^2 == 0.0282 '),
x = 0.2, y = 0.29, size =4, parse = TRUE) +
annotate('text', label = 'P==0.001',
x = 0.2, y = 0.275, size = 4, parse = TRUE)+theme(axis.title = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
p
arg_brary_matrix<-as.matrix(arg_bray)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#BCBDDC", "#54278F"))(50))
library(pheatmap)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#BCBDDC", "#54278F"))(50))
arg_brary_matrix<-1-(arg_brary_matrix)
arg_brary_matrix<-as.matrix(arg_bray)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#BCBDDC", "#54278F"))(50))
library(vegan)
library(ecodist)
library(ggplot2)
library(openxlsx)
library(RColorBrewer)
library(pheatmap)
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/rel abundance table/species_rel_table.xlsx",sheet=1,rowNames=F,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
arg_data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
#這個不一定要，下面這個只是把全部都是0的rows清掉
#dbpata[dbpata<0.0001]<-0
#dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
#dbpata1<-as.data.frame(apply(dbpata,2,function(x) x/sum(x)))
rownames(dbpata)<-dbpata$Species
dbpata<-dbpata[,-(1:7)]
dbpata <-as.data.frame(t(dbpata))
arg_data<-as.data.frame(t(arg_data))
dbpata <- decostand(dbpata, method = 'hellinger')
taxa_bray<-vegdist(dbpata, method="bray")
arg_bray<-vegdist(arg_data, method="bray")
arg_brary_matrix<-1-(arg_brary_matrix)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#BCBDDC", "#54278F"))(50))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#BCBDDC", "#54278F"))(50))
RColorBrewer::display.brewer.all()
RColorBrewer::brewer.pal(n=12,name="YlOrBr")
RColorBrewer::brewer.pal(name="YlOrBr")
RColorBrewer::brewer.pal(n=6,name="YlOrBr")
RColorBrewer::brewer.pal(n=6,name="YlGnBu")
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FE9929", "#41B6C4", "#54278F"))(50))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FFFFD4", "#41B6C4", "#54278F"))(50))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#54278F", "#41B6C4", "#FFFFD4",))(50))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#54278F", "#41B6C4", "#FFFFD4"))(50))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c(, "#54278F" "#41B6C4", "#54278F"))(50))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FFFFD4", "#41B6C4", "#54278F"))(50))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FFFFD4", "#41B6C4", "#54278F"))(100))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#BCBDDC", "#54278F"))(100))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F)(100))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#440154FF", "#1F968BFF", "#FDE725FF"))(100))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FDE725FF" "#1F968BFF", "#440154FF"))(200))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FDE725FF","#1F968BFF", "#440154FF"))(200))
RColorBrewer::display.brewer.all()
RColorBrewer::display.brewer.pal(n=9,name="Purples")
RColorBrewer::brewer.pal(n=6,name="Purples")
RColorBrewer::brewer.pal(n=6,name="YlGnBu")
RColorBrewer::display.brewer.all()
pheatmap(data_log,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FFFFCC", "#41B6C4", "#9E9AC8"))(50))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FFFFCC", "#41B6C4", "#9E9AC8"))(200))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FFFFCC", "#41B6C4", "#BCBDDC"))(200))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F)
RColorBrewer::display.brewer.pal(n=9,name="Purples")
RColorBrewer::brewer.pal(n=9,name="Purples")
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#9E9AC8", "#3F007D"))(200))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#9E9AC8", "#3F007D"))(1000))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#9E9AC8", "#3F007D"))(5000))
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#9E9AC8", "#807DBA"))(5000))
#普氏分析可以用pcoa,pca,nmds等都可以，看哪個分離的好
pcoa1 = cmdscale(taxa_bray, eig=TRUE)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#9E9AC8", "#6A51A3"))(5000))
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/rel abundance table/species_rel_table.xlsx",sheet=1,rowNames=F,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
arg_data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
#這個不一定要，下面這個只是把全部都是0的rows清掉
#dbpata[dbpata<0.0001]<-0
#dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
#dbpata1<-as.data.frame(apply(dbpata,2,function(x) x/sum(x)))
rownames(dbpata)<-dbpata$Species
dbpata<-dbpata[,-(1:7)]
dbpata <-as.data.frame(t(dbpata))
arg_data<-as.data.frame(t(arg_data))
dbpata <- decostand(dbpata, method = 'hellinger')
taxa_bray<-vegdist(dbpata, method="bray")
arg_brary<-1-(taxa_bray)
arg_brary_matrix<-as.matrix(arg_bray)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#9E9AC8", "#6A51A3"))(5000))
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/rel abundance table/species_rel_table.xlsx",sheet=1,rowNames=F,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
arg_data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
#這個不一定要，下面這個只是把全部都是0的rows清掉
#dbpata[dbpata<0.0001]<-0
#dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
#dbpata1<-as.data.frame(apply(dbpata,2,function(x) x/sum(x)))
rownames(dbpata)<-dbpata$Species
dbpata<-dbpata[,-(1:7)]
dbpata <-as.data.frame(t(dbpata))
arg_data<-as.data.frame(t(arg_data))
dbpata <- decostand(dbpata, method = 'hellinger')
taxa_bray<-vegdist(dbpata, method="bray")
arg_bray<-vegdist(arg_data, method="bray")
arg_brary<-1-(taxa_bray)
arg_brary_matrix<-as.matrix(arg_brary)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#9E9AC8", "#6A51A3"))(5000))
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/rel abundance table/species_rel_table.xlsx",sheet=1,rowNames=F,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
arg_data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
#這個不一定要，下面這個只是把全部都是0的rows清掉
#dbpata[dbpata<0.0001]<-0
#dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
#dbpata1<-as.data.frame(apply(dbpata,2,function(x) x/sum(x)))
rownames(dbpata)<-dbpata$Species
dbpata<-dbpata[,-(1:7)]
dbpata <-as.data.frame(t(dbpata))
arg_data<-as.data.frame(t(arg_data))
dbpata <- decostand(dbpata, method = 'hellinger')
taxa_bray<-vegdist(dbpata, method="bray")
arg_bray<-vegdist(arg_data, method="bray")
arg_brary<-1-(arg_bray)
arg_brary_matrix<-as.matrix(arg_brary)
pheatmap(arg_brary_matrix,cluster_rows = F,cluster_cols = F,color=colorRampPalette(c("#FCFBFD", "#9E9AC8", "#6A51A3"))(5000))
View(arg_brary_matrix)
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/rel abundance table/species_rel_table.xlsx",sheet=1,rowNames=F,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
arg_data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
#這個不一定要，下面這個只是把全部都是0的rows清掉
#dbpata[dbpata<0.0001]<-0
#dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
#dbpata1<-as.data.frame(apply(dbpata,2,function(x) x/sum(x)))
rownames(dbpata)<-dbpata$Species
dbpata<-dbpata[,-(1:7)]
dbpata <-as.data.frame(t(dbpata))
arg_data<-as.data.frame(t(arg_data))
dbpata <- decostand(dbpata, method = 'hellinger')
taxa_bray<-vegdist(dbpata, method="bray")
arg_bray<-vegdist(arg_data, method="bray")
arg_brary<-1-(arg_bray)
arg_brary
arg_bray
arg_brary_matrix<-as.matrix(arg_brary)
library(vegan)
library(ecodist)
library(ggplot2)
library(openxlsx)
library(RColorBrewer)
library(pheatmap)
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/rel abundance table/species_rel_table.xlsx",sheet=1,rowNames=F,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
arg_data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
#這個不一定要，下面這個只是把全部都是0的rows清掉
#dbpata[dbpata<0.0001]<-0
#dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
#dbpata1<-as.data.frame(apply(dbpata,2,function(x) x/sum(x)))
rownames(dbpata)<-dbpata$Species
dbpata<-dbpata[,-(1:7)]
dbpata <-as.data.frame(t(dbpata))
arg_data<-as.data.frame(t(arg_data))
dbpata <- decostand(dbpata, method = 'hellinger')
taxa_bray<-vegdist(dbpata, method="bray")
arg_bray<-vegdist(arg_data, method="bray")
arg_brary<-1-(arg_bray)
arg_brary_matrix<-as.matrix(arg_brary)
library(tidyverse)
library(openxlsx)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
dbpata1<-as.data.frame(apply(dbpata[,2:16],2,function(x) x/sum(x)))
rownames(dbpata1)<-dbpata$`Type level results`
dbpata1$sum<-apply(dbpata1[,2:15],1,sum)
dbpata1$average<-(dbpata1$sum)/15
dbpata1$type<-rownames(dbpata1)
View(dbpata1)
library(tidyverse)
library(openxlsx)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
gc()
library(tidyverse)
library(openxlsx)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
View(dbpata)
library(tidyverse)
library(openxlsx)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
dbpata<-dbpata[-(1:3),]
View(dbpata)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
dbpata<-dbpata[,-(1:3)]
dbpata1<-as.data.frame(apply(dbpata[,2:13],2,function(x) x/sum(x)))
rownames(dbpata1)<-dbpata$`Type level results`
dbpata1$sum<-apply(dbpata1[,2:13],1,sum)
dbpata1$average<-(dbpata1$sum)/12
library(tidyverse)
library(openxlsx)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
dbpata<-dbpata[,-(1:3)]
dbpata1<-as.data.frame(apply(dbpata[,2:13],2,function(x) x/sum(x)))
rownames(dbpata1)<-dbpata$`Type level results`
dbpata1$sum<-apply(dbpata1[,2:13],1,sum)
View(dbpata1)
library(tidyverse)
library(openxlsx)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
dbpata<-dbpata[,-(1:3)]
dbpata1<-as.data.frame(apply(dbpata[,2:13],2,function(x) x/sum(x)))
rownames(dbpata1)<-dbpata$`Type level results`
dbpata1$sum<-apply(dbpata1[,2:13],1,sum)
dbpata1$sum<-apply(dbpata1[,2:12],1,sum)
dbpata1$average<-(dbpata1$sum)/12
dbpata1$type<-rownames(dbpata1)
dbpata1<-dbpata1%>%
arrange(desc(average))
View(dbpata1)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
dbpata<-dbpata[,-(1:3)]
View(dbpata)
View(dbpata)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
View(dbpata)
dbpata<-dbpata[,-(2:4)]
dbpata1<-as.data.frame(apply(dbpata[,2:13],2,function(x) x/sum(x)))
rownames(dbpata1)<-dbpata$`Type level results`
View(dbpata)
dbpata1$sum<-apply(dbpata1[,2:12],1,sum)
dbpata1$average<-(dbpata1$sum)/12
dbpata1$type<-rownames(dbpata1)
dbpata1<-dbpata1%>%
arrange(desc(average))
View(dbpata1)
library(openxlsx)
library(tidyverse)
library(RColorBrewer)
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=T,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
dbpata$sum<-apply(dbpata,1,sum)
dbpata<-dbpata[order(dbpata$sum,decreasing = T),]
dbpata<-dbpata[-(11:nrow(dbpata)),]
dbpata$sum<-NULL
dbpata$`ARGs Type`<-rownames(dbpata)
dbpata$`ARGs Type`<-str_to_title(dbpata$`ARGs Type`)
dbpata$`ARGs Type`[dbpata$`ARGs Type`=="Macrolide-Lincosamide-Streptogramin"]<-"MLS"
dbpata$`ARGs Type`[dbpata$`ARGs Type`=="Beta-Lactam"]<-"Beta-lactam"
dbpata1<-gather(data =dbpata, key ="sample",value = "value",1:(ncol(dbpata)-1))
plot<-dbpata1%>%
mutate(type=fct_reorder(`ARGs Type`,desc(value)))%>%
ggplot(aes(x=type,y=value))+geom_boxplot(fill="#BEBADA",alpha=0.7)+
theme_bw()+geom_point(size=1)+labs(x="ARGs Type",y="ARGs abundance normalization against 16S")+theme(axis.title = element_text(size=12.5),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
plot
RColorBrewer::display.brewer.all()
plot
library(tidyverse)
library(openxlsx)
#這是用來畫ARGtype relative abundance 的script，data必須要先經過trasnform，把所有ARGtype 換成在每個樣本中的百分比
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=F,colNames=T,sep.names=" ")
dbpata1<-as.data.frame(apply(dbpata[,2:16],2,function(x) x/sum(x)))
rownames(dbpata1)<-dbpata$`Type level results`
dbpata<-dbpata1
dbpata[dbpata<0.05]<-0
data_sum<-apply(dbpata,2,sum)
dd<-1-data_sum
data2<-rbind(dbpata,dd)
rownames(data2)[25]<-"Others"
data3<-data2[apply(data2, 1, function(x) !all(x==0)),]
data3$`ARGs type`<-rownames(data3)
rownames(data3)<-NULL
data3$`ARGs type`<-factor(data3$`ARGs type`,levels = c("bacitracin","beta-lactam","fosfomycin","macrolide-lincosamide-streptogramin","multidrug","rifamycin","sulfonamide","tetracycline","unclassified","vancomycin","Others"),labels  = c("Bacitracin","Beta-lactam","Fosfomycin","MLS","Multidrug","Rifamycin","Sulfonamide","Tetracycline","Unclassified","Vancomycin","Others"))
data4<-gather(data =data3, key ="xx",value = "yf",1:15)
data5<-data4[-which(data4$yf==0),]
RColorBrewer::display.brewer.all()
RColorBrewer::display.brewer.pal(n=12,name="Set3")
RColorBrewer::brewer.pal(n=12,name="Set3")
#這樣設定是為了要配合前一張圖的顏色
color<-c("#FFFFB3","#BEBADA","#FB8072","#80B1D3","#FDB462","#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#CCEBC5","#FFED6F")
ggplot(data5)+
geom_bar(aes(x=xx,y=yf,fill=`ARGs type`,color=`ARGs type`),alpha=0.85,stat="identity")+
labs(x=NULL,y=NULL)+scale_fill_manual(values = color)+scale_color_manual(values = color)+theme_bw()+labs(x="Sample",y="Relative abundance")+theme(axis.title = element_text(size=12.5),legend.title= element_text(size=12.5),legend.text = element_text(size=12.5))
library("tidyverse")
library("openxlsx")
library("car")
library("FSA")
library("ggsignif")
library("mdthemes")
data<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/ARG/argoap_out.xlsx",sheet=2,rowNames=T,colNames=T)
data<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/argoap_out.xlsx",sheet=2,rowNames=T,colNames=T)
data<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/argoap_out.xlsx",sheet=2,rowNames=T,colNames=T)
#我們先將留下我們想要的DATA，並將組別資訊加到Data中
data<-data[apply(data, 1, function(x) !all(x==0)),]
data<-as.data.frame(t(data))
data$sum<-apply(data,1,sum)
data$location<-c("Raw","Raw","Raw","Finished","Finished","Finished","Upstream","Upstream","Upstream","Midstream","Midstream","Midstream","Downstream","Downstream","Downstream")
data$location<-factor(data$location,levels = c("Raw","Finished","Upstream","Midstream","Downstream"))
varaible_and_group<-sum~location#想測試的變數跟組別
{#檢查數據是否是常態分布的,利用shapiro.test來檢驗數據是不是常態的，如果p>0.05那麼數據就是常態的
Data.levels<-split(data, data$location)
for(i in seq(length(Data.levels))) {
group.n<-length(Data.levels[[i]]$location)
group.name <-Data.levels[[i]]$location[1]
cat(paste("Group: ", group.name, sep=''), sep="", append=TRUE)
if (group.n < 50) {
shapiro.result<- shapiro.test(Data.levels[[i]]$sum)
cat(", Shapiro-Wilk normality test W = ", shapiro.result$statistic, " p-value = ", shapiro.result$p.value, "\n" , sep="")
} else {
ks.result<-ks.test(Data.levels[[i]]$sum, pnorm, mean(Data.levels[[i]]$sum), sd(Data.levels[[i]]$sum))
cat(", Kolmogorov-Smirnov normality test D = ", ks.result$statistic, " p-value = ", ks.result$p.value, "\n" , sep="", append=TRUE)
}
}
#檢查數據變異數的同質性，，如果levenes test 的結果p>0.05，那我們可以認為以這幾個組別間的變異數沒有明顯差異，他們是同質的P
homo<-leveneTest(varaible_and_group,data = data)
if (homo$`Pr(>F)`[1]>0.05){
print("data is homo")
}else{print ("data is nonhomo")}
#如果不同質可以用ftest來看是誰不同質
#res.ftest <- var.test(Data.levels[[1]]$bacitracin,Data.levels[[4]]$bacitracin,data = data)
#res.ftest
}
#我們必須手動去看是否是常態及同質的，如果兩者皆符合，那我們可以使用t-test
pairwise.t.test(data$sum,data$location,p.adjust.method = "BH")
?pairwise.t.test
View(data)
View(data)
varaible_and_group<-aminoglycoside~location#想測試的變數跟組別
{#檢查數據是否是常態分布的,利用shapiro.test來檢驗數據是不是常態的，如果p>0.05那麼數據就是常態的
Data.levels<-split(data, data$location)
for(i in seq(length(Data.levels))) {
group.n<-length(Data.levels[[i]]$location)
group.name <-Data.levels[[i]]$location[1]
cat(paste("Group: ", group.name, sep=''), sep="", append=TRUE)
if (group.n < 50) {
shapiro.result<- shapiro.test(Data.levels[[i]]$aminoglycoside)
cat(", Shapiro-Wilk normality test W = ", shapiro.result$statistic, " p-value = ", shapiro.result$p.value, "\n" , sep="")
} else {
ks.result<-ks.test(Data.levels[[i]]$aminoglycoside, pnorm, mean(Data.levels[[i]]$aminoglycoside), sd(Data.levels[[i]]$aminoglycoside))
cat(", Kolmogorov-Smirnov normality test D = ", ks.result$statistic, " p-value = ", ks.result$p.value, "\n" , sep="", append=TRUE)
}
}
#檢查數據變異數的同質性，，如果levenes test 的結果p>0.05，那我們可以認為以這幾個組別間的變異數沒有明顯差異，他們是同質的P
homo<-leveneTest(varaible_and_group,data = data)
if (homo$`Pr(>F)`[1]>0.05){
print("data is homo")
}else{print ("data is nonhomo")}
#如果不同質可以用ftest來看是誰不同質
#res.ftest <- var.test(Data.levels[[1]]$bacitracin,Data.levels[[4]]$bacitracin,data = data)
#res.ftest
}
#我們必須手動去看是否是常態及同質的，如果兩者皆符合，那我們可以使用t-test
pairwise.t.test(data$sum,data$location,p.adjust.method = "BH")
#如果兩者中有一不符合，那我們得使用wilcoxon rank sum test
pairwise.wilcox.test(data$bacitracin,data$location,p.adjust.method = "BH")
Data.levels[[i]]$aminoglycoside)
Data.levels[[i]]$aminoglycoside
Data.levels[[i]][Data.levels[[i]]=='aminoglycoside']
View(Data.levels)
Data.levels[[i]][Data.levels=='aminoglycoside']
Data.levels[[i]][,Data.levels=='aminoglycoside']
Data.levels[[i]]['aminoglycoside']
x<-'aminoglycoside'
Data.levels[[i]][x]
Data.levels[[i]]$\x
Data.levels[[i]]$\\x
Data.levels[[i]]$x
