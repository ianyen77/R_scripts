#利用ARGOAP 用手動腳本計算16s normalized豐度的腳本
#1.需要先將DB(usearch)換成想要比對的DB(usearch.udb)(stageone)
#2.運行STAGEONE
#3.makeblastdb
#4.blastx
library("openxlsx")
library("tidyverse")
library("car")
library("FSA")
library("mdthemes")
library(RColorBrewer)
#這邊是針對evalue, idendity,aa length 做一些篩選,根據你要的條件調整過
evaluematch<-1e-7
identitymatch<-80
aa_length<-25
#接下來我們將blastx過的output 讀進來
SARG_blastx_hit<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=1,colNames = F)
colnames(SARG_blastx_hit)<-c("qseqid", "gene", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
#根據先前設定的篩選掉不符合的blast
SARG_blastx_filter<-SARG_blastx_hit%>%
filter(evalue<=evaluematch)%>%
filter(pident>=identitymatch)%>%
filter(length>=aa_length)
#接著我們將ARGDATAbase 的AA長度讀進來，可以用perl腳本取得
SARGgenelength<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=2,colNames = F)
colnames(SARGgenelength)<-c("gene","aalength")
SARG_blastx_filter<-merge(SARG_blastx_filter,SARGgenelength,all.x=T,by="gene")
#這個數字是來自metadata online.txt的16s數量
metadata16s<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=3,colNames = T)
SARG_blastx_filter<-separate(SARG_blastx_filter,qseqid,into=c("Name","seqnum"),sep = "_",remove = F)
SARG_blastx_filter$seqnum<-NULL
SARG_annoate_blastx<-merge(SARG_blastx_filter,metadata16s,by="Name",all.x = T)
#合併基因的名字
gene_name<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGE namefile.xlsx",sheet=1,colNames = F)
colnames(gene_name)<-c("gene","type","subtype")
gene_name$gene<- paste(gene_name$gene,"1", sep="_")
SARG_annoate_blastx<-merge(SARG_annoate_blastx,gene_name,by="gene",all.x=T)
SARG_annoate_blastx$SampleID<-NULL
write.xlsx(SARG_annoate_blastx,"C:/Users/USER/Desktop/MGE_blast_out.xlsx")
SARG_annoate_blastx<-read.xlsx("C:/Users/USER/Desktop/MGE_blast_out.xlsx",sheet=1)
#這個計算是將blast到的長度/reference AA的長度*16S數量，再加總
SARG_annoate_blastx<-SARG_annoate_blastx%>%
mutate("blastlength/referencelength"=length/(aalength*`#of16Sreads`))
subtype_16snormalize<-SARG_annoate_blastx%>%
group_by(Name,type,subtype)%>%
summarise(subtype_sum=sum(`blastlength/referencelength`,na.rm = T))%>%
unite("subtype",type,subtype,sep = "__" )%>%
spread(key = subtype,value = subtype_sum)
subtype_16snormalize[is.na(subtype_16snormalize)]<-0
write.xlsx(subtype_16snormalize,"C:/Users/USER/Desktop/MGEblastoutform.xlsx")
#分析MGE跟ARG的相關性
arg<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=T,colNames =T)
arg<-as.data.frame(t(arg))
arg$sum<-apply(arg,1,sum)
arg$location<-c("Raw","Raw","Raw","Finished","Finished","Finished","Upstream","Upstream","Upstream","Midstream","Midstream","Midstream","Downstream","Downstream","Downstream")
arg$location<-factor(arg$location,levels = c("Raw","Finished","Upstream","Midstream","Downstream"))
subtype_16snormalize$sum<-apply(subtype_16snormalize[,2:19],1,sum)
MGE_ARG<-as.data.frame(cbind(as.data.frame(cbind(subtype_16snormalize$sum,arg$sum)),arg$location))
colnames(MGE_ARG)[1]<-"MGE_sum"
colnames(MGE_ARG)[2]<-"arg_sum"
colnames(MGE_ARG)[3]<-"location"
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
cor.test(MGE_ARG$MGE_sum,MGE_ARG$arg_sum,method = "pearson")
ARG_Marg<-MGE_ARG[-(1:3),]
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
cor.test(MGE_ARG$MGE_sum,MGE_ARG$arg_sum,method = "pearson")
ARG_ARG<-MGE_ARG[-(1:3),]
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
cor.test(MGE_ARG$MGE_sum,MGE_ARG$arg_sum,method = "pearson")
#利用ARGOAP 用手動腳本計算16s normalized豐度的腳本
#1.需要先將DB(usearch)換成想要比對的DB(usearch.udb)(stageone)
#2.運行STAGEONE
#3.makeblastdb
#4.blastx
library("openxlsx")
library("tidyverse")
library("car")
library("FSA")
library("mdthemes")
library(RColorBrewer)
#這邊是針對evalue, idendity,aa length 做一些篩選,根據你要的條件調整過
evaluematch<-1e-7
identitymatch<-80
aa_length<-25
#接下來我們將blastx過的output 讀進來
SARG_blastx_hit<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=1,colNames = F)
colnames(SARG_blastx_hit)<-c("qseqid", "gene", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
#根據先前設定的篩選掉不符合的blast
SARG_blastx_filter<-SARG_blastx_hit%>%
filter(evalue<=evaluematch)%>%
filter(pident>=identitymatch)%>%
filter(length>=aa_length)
#接著我們將ARGDATAbase 的AA長度讀進來，可以用perl腳本取得
SARGgenelength<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=2,colNames = F)
colnames(SARGgenelength)<-c("gene","aalength")
SARG_blastx_filter<-merge(SARG_blastx_filter,SARGgenelength,all.x=T,by="gene")
#這個數字是來自metadata online.txt的16s數量
metadata16s<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGEblastout_ARGOAP.xlsx",sheet=3,colNames = T)
SARG_blastx_filter<-separate(SARG_blastx_filter,qseqid,into=c("Name","seqnum"),sep = "_",remove = F)
SARG_blastx_filter$seqnum<-NULL
SARG_annoate_blastx<-merge(SARG_blastx_filter,metadata16s,by="Name",all.x = T)
#合併基因的名字
gene_name<-read.xlsx(xlsxFile = "C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/MGE/MGE namefile.xlsx",sheet=1,colNames = F)
colnames(gene_name)<-c("gene","type","subtype")
gene_name$gene<- paste(gene_name$gene,"1", sep="_")
SARG_annoate_blastx<-merge(SARG_annoate_blastx,gene_name,by="gene",all.x=T)
SARG_annoate_blastx$SampleID<-NULL
write.xlsx(SARG_annoate_blastx,"C:/Users/USER/Desktop/MGE_blast_out.xlsx")
SARG_annoate_blastx<-read.xlsx("C:/Users/USER/Desktop/MGE_blast_out.xlsx",sheet=1)
#這個計算是將blast到的長度/reference AA的長度*16S數量，再加總
SARG_annoate_blastx<-SARG_annoate_blastx%>%
mutate("blastlength/referencelength"=length/(aalength*`#of16Sreads`))
subtype_16snormalize<-SARG_annoate_blastx%>%
group_by(Name,type,subtype)%>%
summarise(subtype_sum=sum(`blastlength/referencelength`,na.rm = T))%>%
unite("subtype",type,subtype,sep = "__" )%>%
spread(key = subtype,value = subtype_sum)
subtype_16snormalize[is.na(subtype_16snormalize)]<-0
write.xlsx(subtype_16snormalize,"C:/Users/USER/Desktop/MGEblastoutform.xlsx")
#分析MGE跟ARG的相關性
arg<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=2,rowNames=T,colNames =T)
arg<-as.data.frame(t(arg))
arg$sum<-apply(arg,1,sum)
arg$location<-c("Raw","Raw","Raw","Finished","Finished","Finished","Upstream","Upstream","Upstream","Midstream","Midstream","Midstream","Downstream","Downstream","Downstream")
arg$location<-factor(arg$location,levels = c("Raw","Finished","Upstream","Midstream","Downstream"))
subtype_16snormalize$sum<-apply(subtype_16snormalize[,2:19],1,sum)
MGE_ARG<-as.data.frame(cbind(as.data.frame(cbind(subtype_16snormalize$sum,arg$sum)),arg$location))
colnames(MGE_ARG)[1]<-"MGE_sum"
colnames(MGE_ARG)[2]<-"arg_sum"
colnames(MGE_ARG)[3]<-"location"
ARG_ARG<-MGE_ARG[-(1:3),]
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
MGE_ARG<-MGE_ARG[-(1:3),]
#先畫MGE跟ARG豐度的scatter plot
ggplot(MGE_ARG,aes(x=MGE_sum,y=arg_sum))+
geom_point(color="#80B1D3",size=3,alpha=0.7)+geom_smooth(method =lm,color="#80B1D3",alpha=0.3) +theme_bw()+labs(x="Total MGEs abundance against 16S",y="Total ARGs abundance against 16S")+
theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
cor.test(MGE_ARG$MGE_sum,MGE_ARG$arg_sum,method = "pearson")
#mds.taxa<-monoMDS(taxa_bray)
#mds.arg<-monoMDS(arg_bray)
pro.g.s<-procrustes(pcoa1,pcoa2,symmetric = T)
library(vegan)
library(ecodist)
library(ggplot2)
library(openxlsx)
library(RColorBrewer)
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/rel abundance table/species_rel_table.xlsx",sheet=1,rowNames=F,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
arg_data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
#這個不一定要，下面這個只是把全部都是0的rows清掉
#dbpata[dbpata<0.0001]<-0
#dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
#dbpata1<-as.data.frame(apply(dbpata,2,function(x) x/sum(x)))
rownames(dbpata)<-dbpata$Species
dbpata<-dbpata[,-(1:7)]
dbpata <-as.data.frame(t(dbpata))
arg_data<-as.data.frame(t(arg_data))
dbpata <- decostand(dbpata, method = 'hellinger')
taxa_bray<-vegdist(dbpata, method="bray")
arg_bray<-vegdist(arg_data, method="bray")
#普氏分析可以用pcoa,pca,nmds等都可以，看哪個分離的好
pcoa1 = cmdscale(taxa_bray, eig=TRUE)
pcoa2 = cmdscale(arg_bray, eig=TRUE)
#mds.taxa<-monoMDS(taxa_bray)
#mds.arg<-monoMDS(arg_bray)
pro.g.s<-procrustes(pcoa1,pcoa2,symmetric = T)
summary(pro.g.s)
protest(pcoa1,pcoa2)
plot(pro.g.s, kind = 1,type="text")
?procrustes
#mds.taxa<-monoMDS(taxa_bray)
#mds.arg<-monoMDS(arg_bray)
pro.g.s<-procrustes(pcoa1,pcoa2,symmetric = T,permutations=9999)
summary(pro.g.s)
protest(pcoa1,pcoa2)
?protest
?protest
library(vegan)
library(ecodist)
library(ggplot2)
library(openxlsx)
library(RColorBrewer)
dbpata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/rel abundance table/genus_rel_table.xlsx",sheet=1,rowNames=F,colNames=T,sep.names=" ")
groupata<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/TAXA/groupdata.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
arg_data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=T,colNames=T,sep.names=" ")
#這個不一定要，下面這個只是把全部都是0的rows清掉
#dbpata[dbpata<0.0001]<-0
#dbpata<-dbpata[apply(dbpata, 1, function(x) !all(x==0)),]
#dbpata1<-as.data.frame(apply(dbpata,2,function(x) x/sum(x)))
rownames(dbpata)<-dbpata$Genus
dbpata<-dbpata[,-(1:7)]
View(dbpata)
dbpata <-as.data.frame(t(dbpata))
arg_data<-as.data.frame(t(arg_data))
dbpata <- decostand(dbpata, method = 'hellinger')
taxa_bray<-vegdist(dbpata, method="bray")
arg_bray<-vegdist(arg_data, method="bray")
#普氏分析可以用pcoa,pca,nmds等都可以，看哪個分離的好
pcoa1 = cmdscale(taxa_bray, eig=TRUE)
pcoa2 = cmdscale(arg_bray, eig=TRUE)
#mds.taxa<-monoMDS(taxa_bray)
#mds.arg<-monoMDS(arg_bray)
pro.g.s<-procrustes(pcoa1,pcoa2,symmetric = T)
summary(pro.g.s)
protest(pcoa1,pcoa2)
plot(pro.g.s, kind = 1,type="text")
Y<-cbind(data.frame(pro.g.s$Yrot),data.frame(pro.g.s$X))
X<-data.frame(pro.g.s$rotation)
Y$sample<-rownames(Y)
Y <- merge(Y, groupata, by = 'sample')
Y$location<-factor(Y$location,levels = c("Raw","Finished","Upstream","Midstream","Downstream"))
#color
RColorBrewer::display.brewer.all()
display.brewer.pal(n=12,name="Set3")
brewer.pal(n=12,name="Set3")
color<-c("#FB8072","#BEBADA","#80B1D3","#FDB462","#B3DE69")
#if you use the Rcolor brewer,你需要利用scale_color_brewer(palette="paletee_name")
#自選顏色的話用Scale_color_manual(values=color_vector)
#ggplot
p <- ggplot(Y) +
geom_segment(aes(x = X1, y = X2,
xend = Dim1, yend = Dim2,color=location),
# geom_segment 绘制两点间的直线
size = 0.75,linetype="dashed",alpha=0.7) +
geom_point(aes(X1, X2, color =location),shape=16,size = 3,alpha=0.5) +
geom_point(aes(Dim1,Dim2,color = location),shape=17,size = 3,alpha=0.5) +
scale_color_manual("Location",values = color) +theme_bw() +labs( title="Procrustes analysis")+
labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
geom_vline(xintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
geom_hline(yintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
annotate('text', label = sprintf('M^2 == 0.0282 '),
x = 0.2, y = 0.29, size =4, parse = TRUE) +
annotate('text', label = 'P==0.001',
x = 0.2, y = 0.275, size = 4, parse = TRUE)+theme(axis.title = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
p
source("~/GitHub/R_scripts/Plot/Procrustes Analysis.R", echo=TRUE)
#mds.taxa<-monoMDS(taxa_bray)
#mds.arg<-monoMDS(arg_bray)
pro.g.s<-procrustes(pcoa1,pcoa2,symmetric = F)
summary(pro.g.s)
protest(pcoa1,pcoa2)
plot(pro.g.s, kind = 1,type="text")
Y<-cbind(data.frame(pro.g.s$Yrot),data.frame(pro.g.s$X))
X<-data.frame(pro.g.s$rotation)
Y$sample<-rownames(Y)
Y <- merge(Y, groupata, by = 'sample')
Y$location<-factor(Y$location,levels = c("Raw","Finished","Upstream","Midstream","Downstream"))
#color
RColorBrewer::display.brewer.all()
display.brewer.pal(n=12,name="Set3")
brewer.pal(n=12,name="Set3")
color<-c("#FB8072","#BEBADA","#80B1D3","#FDB462","#B3DE69")
#if you use the Rcolor brewer,你需要利用scale_color_brewer(palette="paletee_name")
#自選顏色的話用Scale_color_manual(values=color_vector)
#ggplot
p <- ggplot(Y) +
geom_segment(aes(x = X1, y = X2,
xend = Dim1, yend = Dim2,color=location),
# geom_segment 绘制两点间的直线
size = 0.75,linetype="dashed",alpha=0.7) +
geom_point(aes(X1, X2, color =location),shape=16,size = 3,alpha=0.5) +
geom_point(aes(Dim1,Dim2,color = location),shape=17,size = 3,alpha=0.5) +
scale_color_manual("Location",values = color) +theme_bw() +labs( title="Procrustes analysis")+
labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
geom_vline(xintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
geom_hline(yintercept = 0, color = 'gray', linetype = 2, size = 0.3) +
annotate('text', label = sprintf('M^2 == 0.0282 '),
x = 0.2, y = 0.29, size =4, parse = TRUE) +
annotate('text', label = 'P==0.001',
x = 0.2, y = 0.275, size = 4, parse = TRUE)+theme(axis.title = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
p
