summarise_at(vars(orf_coverage), funs(sum))
data_stat<-data_contig%>%
group_by(Sample,type)%>%
summarise_at(vars(orf_coverage), funs(sum))
v$type<-str_to_sentence(data_stat$type)
data_stat$type.x[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type.x[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
data_stat<-data_contig%>%
group_by(Sample,type)%>%
summarise_at(vars(orf_coverage), funs(sum))
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
View(data_stat)
color<-c( "#FFFFB3" ,"#BC80BD" , "#FB8072" ,"#80B1D3" ,"#FDB462" ,"#B3DE69" ,"#FCCDE5" ,"#D9D9D9","#BEBADA" ,"#CCEBC5" ,"#FFED6F")
ggplot(data_stat)+geom_bar(aes(x=Sample,y=,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)
color<-hcl.colors(14,'Set3')
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
color<-hcl.colors(14,'Set3')
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
color
color1<-c( "#FFFFB3" ,"#BC80BD" , "#FB8072" ,"#80B1D3" ,"#FDB462" ,"#B3DE69" ,"#FCCDE5" ,"#D9D9D9","#BEBADA" ,"#CCEBC5" ,"#FFED6F")\
color<-hcl.colors(14,'Set3')
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
cols <- hcl.colors(31, "Set3")
library(RColorBrewer)
cols<- hcl.colors(31, "Set3")
library(ggsankey)
cols<- hcl.colors(12, "Set3")
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
color1<-c( "#FFFFB3" ,"#BC80BD" , "#FB8072" ,"#80B1D3" ,"#FDB462" ,"#B3DE69" ,"#FCCDE5" ,"#D9D9D9","#BEBADA" ,"#CCEBC5" ,"#FFED6F")\
color<- hcl.colors(12, "Set3")
color<- hcl.colors(14, "Set3")
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
color<- hcl.colors(14, "Set3")
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
library(openxlsx)
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
library(ggsankey)
##ARG orf type coverage
data_stat<-data_contig%>%
group_by(Sample,type)%>%
summarise_at(vars(orf_coverage), funs(sum))
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
##ARG orf type coverage
data_stat<-data_contig%>%
group_by(Sample,type)%>%
summarise_at(vars(orf_coverage), funs(sum))
library(openxlsx)
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
library(ggsankey)
data_contig<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARC_analysis/ARC_phyla_整理.xlsx",sheet=1)
data_contig$contig_phyla[is.na(data_contig$contig_phyla)]<-"Unclassified"
data_contig$contig_phyla[data_contig$contig_phyla == "Bacteria"]<-"Unclassified"
##ARG orf type coverage
data_stat<-data_contig%>%
group_by(Sample,type)%>%
summarise_at(vars(orf_coverage), funs(sum))
color1<-c( "#FFFFB3" ,"#BC80BD" , "#FB8072" ,"#80B1D3" ,"#FDB462" ,"#B3DE69" ,"#FCCDE5" ,"#D9D9D9","#BEBADA" ,"#CCEBC5" ,"#FFED6F")
color<- hcl.colors(14, "Set3")
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
color<- hcl.colors(14, "Sunset")
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
data_stat<-data_contig%>%
group_by(Sample,type,subtype)%>%
summarise_at(vars(orf_coverage), funs(sum))
data_stat<-data_contig%>%
group_by(Sample,type)%>%
summarise_at(vars(orf_coverage), funs(sum))
data_stat$Sample[data_stat$Sample=="T1"]<-"Raw"
data_stat$Sample[data_stat$Sample=="T2"]<-"Finished"
data_stat$Sample[data_stat$Sample=="T3"]<-"Upstream"
data_stat$Sample[data_stat$Sample=="T4"]<-"Midstream"
data_stat$Sample[data_stat$Sample=="T5"]<-"Downstream"
data_stat$type<-str_to_sentence(data_stat$type)
data_stat$type[data_stat$type=="Macrolide-lincosamide-streptogramin"]<-"MLS"
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
data_stat$Sample<-factor(data_stat$Sample,levels = c("Raw","Finished","Upstream","Midstream","Downstream"))
color1<-c( "#FFFFB3" ,"#BC80BD" , "#FB8072" ,"#80B1D3" ,"#FDB462" ,"#B3DE69" ,"#FCCDE5" ,"#D9D9D9","#BEBADA" ,"#CCEBC5" ,"#FFED6F")
color<- hcl.colors(14, "Sunset")
ggplot(data_stat)+geom_bar(aes(x=Sample,y=orf_coverage,fill=type,color=type),stat="identity",alpha=0.7,width = 0.8)+
scale_fill_manual("Location",values = color)+scale_color_manual("Location",values = color)+theme_bw()+labs(x="ARG Type",y="ARC coverage (x/GB)")+
theme(axis.title = element_text(size=13),axis.text = element_text(size=12),legend.title= element_text(size=12),legend.text = element_text(size=12))
##ARG orf subtype coverage
data_stat<-data_contig%>%
group_by(Sample,type,subtype)%>%
summarise_at(vars(orf_coverage), funs(sum))
data_stat<-data_contig%>%
group_by(Sample,type,subtype)%>%
summarise_at(vars(orf_coverage), funs(sum))
View(data_stat)
View(data_stat)
View(data_contig)
View(data_stat)
View(data_contig)
View(data_stat)
data_stat<-data_contig%>%
group_by(Sample,type,subtype,contig_phyla,contig_taxon.x)
data_stat<-data_contig%>%
group_by(Sample,type,subtype,contig_phyla,contig_taxon.x)%>%
summarise_at(vars(orf_coverage), funs(sum))
View(data_stat)
library(openxlsx)
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
library(ggsankey)
data_contig<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARC_analysis/ARC_phyla_整理.xlsx",sheet=1)
data_contig$contig_phyla[is.na(data_contig$contig_phyla)]<-"Unclassified"
data_contig$contig_phyla[data_contig$contig_phyla == "Bacteria"]<-"Unclassified"
library(openxlsx)
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=F,colNames =T)
data_core<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/plot/venn/ARG_venn.xlsx")
data_core1<-data_core$`Raw|Finished|Upstream|Midstream|Downstream`
data_core1<-data_core1[!is.na(data_core1)]
data_core1<-as.data.frame(cbind(data_core1,rep(1,26)))
colnames(data_core1)<-c("ARGs.abundance.normalization.aganist.16S","core")
data_core<-merge(data,data_core1,all.y = T,by=("ARGs.abundance.normalization.aganist.16S"))
View(data_core)
View(data_core1)
##core ARG list
core_arg_list<-data_core1$ARGs.abundance.normalization.aganist.16S
View(data)
View(data_contig)
View(data_contig)
##core ARG list
core_arg_list<-data_core1$ARGs.abundance.normalization.aganist.16S
core_arg_list<-data_core1$ARGs.abundance.normalization.aganist.16S%>%
separate(into=c("type","subtype"),sep="__")
##core ARG list
core_arg_list<-data_core1
View(core_arg_list)
data_core1
separate(`ARGs.abundance.normalization.aganist.16S`,into=c("type","subtype"),sep="__")
View(data_core1)
separate(`ARGs.abundance.normalization.aganist.16S`,into=c("type","subtype"),sep="__")
separate(data_core1$ARGs.abundance.normalization.aganist.16S,into=c("type","subtype"),sep="__")
library(tidyverse)
data_core1
separate(data_core1$ARGs.abundance.normalization.aganist.16S,into=c("type","subtype"),sep="__")
separate(data_core1$ARGs.abundance.normalization.aganist.16S,into=c("type","subtype"),sep = "__")
##core ARG list
core_arg_list<-as.data.frame(data_core1)%>%
separate(`ARGs.abundance.normalization.aganist.16S`,into=c("type","subtype"),sep = "__")
View(core_arg_list)
data_contig[data_contig$subtype %in% core_arg_list$subtype,]
core_arg_data_contig<-data_contig[data_contig$subtype %in% core_arg_list$subtype,]
View(core_arg_data_contig)
data_stat<-core_arg_data_contig%>%
group_by(subtype,contig_taxon.x)
View(data_stat)
data_stat<-core_arg_data_contig%>%
select(Sample,type,subtype,contig_phyla,contig_taxon.x)
data_stat<-core_arg_data_contig%>%
select(Sample,type,subtype,contig_phyla,contig_taxon.x)%>%
group_by(subtype,contig_taxon.x)%>%
count()
View(data_stat)
View(data_stat)
data_stat<-core_arg_data_contig%>%
select(Sample,type,subtype,contig_phyla,contig_taxon.x)%>%
group_by(type,subtype,contig_taxon.x)%>%
count()
View(data_stat)
source("C:/Users/USER/Documents/GitHub/R_scripts/Plot/core_ARG ARG correlation.R")
?source
source("C:/Users/USER/Documents/GitHub/R_scripts/Plot/core_ARG ARG correlation.R",from=6,to=11)
source("C:/Users/USER/Documents/GitHub/R_scripts/Plot/core_ARG ARG correlation.R", from= 6,to=11)
source("C:/Users/USER/Documents/GitHub/R_scripts/Plot/core_ARG ARG correlation.R")
source("C:/Users/USER/Documents/GitHub/R_scripts/Plot/core_ARG ARG correlation.R")
library(openxlsx)
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=F,colNames =T)
data_core<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/plot/venn/ARG_venn.xlsx")
data_core1<-data_core$`Raw|Finished|Upstream|Midstream|Downstream`
data_core1<-data_core1[!is.na(data_core1)]
data_core1<-as.data.frame(cbind(data_core1,rep(1,26)))
colnames(data_core1)<-c("ARGs.abundance.normalization.aganist.16S","core")
data_core<-merge(data,data_core1,all.y = T,by=("ARGs.abundance.normalization.aganist.16S"))
data_core_sum<-apply(data_core[,2:16],2,sum)
data_sum<-apply(data[,2:16],2,sum)
data1<-as.data.frame(cbind(total_arg=data_sum,core_arg=data_core_sum))
data1<-data1[-(1:3),]
ggplot(data = data1,aes(x=core_arg,y=total_arg))+
geom_point(color="#8DD3C7",size=3)+geom_smooth(method="lm",color="#8DD3C7")+theme_bw()+
labs(y = "Total ARGs abundnace aganists 16S",x="Core ARGs abundnace aganists 16S") +theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
precentage<-data_core_sum/data_sum
data$precentage<-precentage
View(data)
View(data1)
precentage<-data_core_sum/data_sum
data1$precentage<-precentage
library(openxlsx)
library(tidyverse)
library(RColorBrewer)
library(ggplot2)
data<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/ARGoap_out.xlsx",sheet=1,rowNames=F,colNames =T)
data_core<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/plot/venn/ARG_venn.xlsx")
data_core1<-data_core$`Raw|Finished|Upstream|Midstream|Downstream`
data_core1<-data_core1[!is.na(data_core1)]
data_core1<-as.data.frame(cbind(data_core1,rep(1,26)))
colnames(data_core1)<-c("ARGs.abundance.normalization.aganist.16S","core")
data_core<-merge(data,data_core1,all.y = T,by=("ARGs.abundance.normalization.aganist.16S"))
data_core_sum<-apply(data_core[,2:16],2,sum)
data_sum<-apply(data[,2:16],2,sum)
data1<-as.data.frame(cbind(total_arg=data_sum,core_arg=data_core_sum))
#data1<-data1[-(1:3),]
ggplot(data = data1,aes(x=core_arg,y=total_arg))+
geom_point(color="#8DD3C7",size=3)+geom_smooth(method="lm",color="#8DD3C7")+theme_bw()+
labs(y = "Total ARGs abundnace aganists 16S",x="Core ARGs abundnace aganists 16S") +theme(axis.title = element_text(size=13),axis.text =element_text(size=12.5)  ,legend.title= element_text(size=12),legend.text = element_text(size=12))
precentage<-data_core_sum/data_sum
data1$precentage<-precentage
source("C:/Users/USER/Documents/GitHub/R_scripts/Plot/core_ARG ARG correlation.R")
View(plotdata)
View(data1)
View(data_core1)
##core ARG list
data_core<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/plot/venn/ARG_venn.xlsx")
data_core1<-data_core$`Raw|Finished|Upstream|Midstream|Downstream`
##core ARG list
data_core<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/plot/venn/ARG_venn.xlsx")
##core ARG list
data_core<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/plot/venn/ARG_venn.xlsx")
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
stopifnot(is.character(list))
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character vector or NULL")
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
##core ARG list
data_core<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/plot/venn/ARG_venn.xlsx")
data_core1<-data_core$`Raw|Finished|Upstream|Midstream|Downstream`
data_core1<-data_core1[!is.na(data_core1)]
data_core1<-as.data.frame(cbind(data_core1,rep(1,26)))
colnames(data_core1)<-c("ARGs.abundance.normalization.aganist.16S","core")
View(data_core)
##core ARG list
data_core<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/plot/venn/ARG_venn.xlsx")
data_core1<-data_core$`Raw|Finished|Upstream|Midstream|Downstream`
data_core1<-data_core1[!is.na(data_core1)]
data_core1<-as.data.frame(cbind(data_core1,rep(1,26)))
colnames(data_core1)<-c("ARGs.abundance.normalization.aganist.16S","core")
core_arg_list<-as.data.frame(data_core1)%>%
separate(`ARGs.abundance.normalization.aganist.16S`,into=c("type","subtype"),sep = "__")
core_arg_data_contig<-data_contig[data_contig$subtype %in% core_arg_list$subtype,]
data_stat<-core_arg_data_contig%>%
select(Sample,type,subtype,contig_phyla,contig_taxon.x)%>%
group_by(type,subtype,contig_taxon.x)%>%
count()
library(openxlsx)
library(tidyverse)
library(pheatmap)
library(RColorBrewer)
library(ggsankey)
data_contig<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARC_analysis/ARC_phyla_整理.xlsx",sheet=1)
data_contig$contig_phyla[is.na(data_contig$contig_phyla)]<-"Unclassified"
data_contig$contig_phyla[data_contig$contig_phyla == "Bacteria"]<-"Unclassified"
##core ARG list
data_core<-read.xlsx("C:/Users/USER/Desktop/lab/實驗/Metagenomic in DWDS/DATA/newDATA/ARG/plot/venn/ARG_venn.xlsx")
data_core1<-data_core$`Raw|Finished|Upstream|Midstream|Downstream`
data_core1<-data_core1[!is.na(data_core1)]
data_core1<-as.data.frame(cbind(data_core1,rep(1,26)))
colnames(data_core1)<-c("ARGs.abundance.normalization.aganist.16S","core")
core_arg_list<-as.data.frame(data_core1)%>%
separate(`ARGs.abundance.normalization.aganist.16S`,into=c("type","subtype"),sep = "__")
core_arg_data_contig<-data_contig[data_contig$subtype %in% core_arg_list$subtype,]
data_stat<-core_arg_data_contig%>%
select(Sample,type,subtype,contig_phyla,contig_taxon.x)%>%
group_by(type,subtype,contig_taxon.x)%>%
count()
View(data_stat)
data_stat<-core_arg_data_contig%>%
select(Sample,type,subtype,contig_phyla,contig_taxon.x)%>%
group_by(type,subtype,contig_taxon.x)%>%
count()
